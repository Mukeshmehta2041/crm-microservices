server:
  port: 8086

spring:
  application:
    name: leads-service
  
  profiles:
    active: dev
  
  datasource:
    url: jdbc:postgresql://localhost:5432/leads_db
    username: crm_user
    password: crm_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
  
  redis:
    host: localhost
    port: 6379
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
  
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
    consumer:
      group-id: leads-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.crm.platform.leads.dto,com.crm.platform.common.dto"
  
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour
      cache-null-values: false

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    metadata-map:
      version: 1.0.0
      description: "CRM Leads Management Service"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    redis:
      enabled: true
    db:
      enabled: true

logging:
  level:
    com.crm.platform.leads: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.redis: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/leads-service.log

# Custom application properties
app:
  lead-scoring:
    cache-ttl: 3600 # 1 hour in seconds
    recalculation-batch-size: 100
    enable-real-time-scoring: true
  
  validation:
    strict-email-validation: true
    require-contact-method: true
    enable-duplicate-check: true
  
  kafka:
    topics:
      lead-events: lead-events
      lead-status-changes: lead-status-changes
      lead-qualification-changes: lead-qualification-changes
      lead-assignments: lead-assignments
      lead-conversions: lead-conversions
      lead-bulk-assignments: lead-bulk-assignments
      lead-bulk-status-changes: lead-bulk-status-changes

---
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://postgres:5432/leads_db
  
  redis:
    host: redis
  
  kafka:
    bootstrap-servers: kafka:9092

eureka:
  client:
    service-url:
      defaultZone: http://discovery-server:8761/eureka/

---
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  
  flyway:
    enabled: false
  
  kafka:
    producer:
      bootstrap-servers: ${spring.embedded.kafka.brokers}
    consumer:
      bootstrap-servers: ${spring.embedded.kafka.brokers}

logging:
  level:
    com.crm.platform.leads: INFO
    org.hibernate.SQL: INFO