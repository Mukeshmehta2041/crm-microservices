server:
  port: 8087

spring:
  application:
    name: analytics-service
  
  datasource:
    url: jdbc:postgresql://localhost:5432/analytics_db
    username: ${DB_USERNAME:analytics_user}
    password: ${DB_PASSWORD:analytics_pass}
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: analytics-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.crm.platform.*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      
  graphql:
    websocket:
      path: /graphql
    path: /graphql
    
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_URL:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
      
influxdb:
  url: ${INFLUXDB_URL:http://localhost:8086}
  token: ${INFLUXDB_TOKEN:analytics-token}
  org: ${INFLUXDB_ORG:crm-platform}
  bucket: ${INFLUXDB_BUCKET:analytics}
  
analytics:
  cache:
    ttl: 300 # 5 minutes
  dashboard:
    refresh-interval: 30 # 30 seconds
  reports:
    max-concurrent: 5
    timeout: 300 # 5 minutes
  websocket:
    heartbeat-interval: 30 # 30 seconds
    
logging:
  level:
    com.crm.platform.analytics: DEBUG
    org.springframework.kafka: INFO
    com.influxdb: INFO