name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx2g -XX:MaxMetaspaceSize=512m'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Testing
  quality-and-test:
    name: Quality Checks and Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Verify Maven wrapper
      run: |
        if [ ! -f "./mvnw" ]; then
          echo "Maven wrapper not found, generating..."
          mvn wrapper:wrapper
        fi
        chmod +x ./mvnw

    - name: Run code formatting check
      run: ./mvnw spotless:check

    - name: Compile code
      run: ./mvnw clean compile -DskipTests

    - name: Run unit tests
      run: ./mvnw test
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: crm_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run integration tests
      run: ./mvnw verify -DskipUnitTests=true
      env:
        SPRING_PROFILES_ACTIVE: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: crm_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Generate test coverage report
      run: ./mvnw jacoco:report

    - name: Run Checkstyle
      run: ./mvnw checkstyle:check

    - name: Run PMD
      run: ./mvnw pmd:check

    - name: Run SpotBugs
      run: ./mvnw spotbugs:check

    - name: Run OWASP Dependency Check
      run: ./mvnw dependency-check:check
      continue-on-error: true  # Don't fail build on vulnerabilities, just report

    - name: SonarCloud Scan
      if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./mvnw sonar:sonar \
          -Dsonar.projectKey=crm-microservices-platform \
          -Dsonar.organization=your-org \
          -Dsonar.host.url=https://sonarcloud.io

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          **/target/surefire-reports/
          **/target/failsafe-reports/
          **/target/site/jacoco/

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: |
          **/target/checkstyle-result.xml
          **/target/pmd.xml
          **/target/spotbugsXml.xml
          **/target/dependency-check-report.html

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Maven Tests
        path: '**/target/surefire-reports/TEST-*.xml'
        reporter: java-junit

  # Job 2: Build and Package
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: quality-and-test
    if: github.event_name == 'push' || github.event_name == 'release'

    outputs:
      version: ${{ steps.version.outputs.version }}
      services: ${{ steps.services.outputs.services }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
        else
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)-${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Set version in POM
      run: ./mvnw versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false

    - name: Package applications
      run: ./mvnw clean package -DskipTests

    - name: Get service list
      id: services
      run: |
        SERVICES=$(find services -name "Dockerfile" -exec dirname {} \; | sed 's|services/||' | tr '\n' ',' | sed 's/,$//')
        echo "services=$SERVICES" >> $GITHUB_OUTPUT
        echo "Services: $SERVICES"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          **/target/*.jar
          !**/target/*-sources.jar
          !**/target/*-javadoc.jar
        retention-days: 30

  # Job 3: Build Docker Images
  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        service: [discovery-server, api-gateway, auth-service, tenant-service, users-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.build-and-package.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-docker-images
    if: github.event_name == 'push' || github.event_name == 'release'

    strategy:
      matrix:
        service: [discovery-server, api-gateway, auth-service, tenant-service, users-service]

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # Job 5: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-docker-images, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development environment
      run: |
        echo "Deploying to development environment..."
        # Add your deployment script here
        ./scripts/deploy-environment.sh dev
      env:
        ENVIRONMENT: development
        DOCKER_REGISTRY: ${{ env.REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker-images, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        ./scripts/deploy-environment.sh staging
      env:
        ENVIRONMENT: staging
        DOCKER_REGISTRY: ${{ env.REGISTRY }}
        IMAGE_TAG: ${{ github.sha }}

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        ./scripts/smoke-tests.sh staging

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker-images, security-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        ./scripts/deploy-environment.sh prod
      env:
        ENVIRONMENT: production
        DOCKER_REGISTRY: ${{ env.REGISTRY }}
        IMAGE_TAG: ${{ github.event.release.tag_name }}

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        ./scripts/health-check.sh prod

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

  # Job 8: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Clean up old artifacts
      run: |
        echo "Cleaning up old artifacts..."
        # Add cleanup logic here