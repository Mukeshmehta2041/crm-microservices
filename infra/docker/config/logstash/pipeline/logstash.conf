input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse JSON logs from Spring Boot applications
  if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }
  
  # Extract correlation ID and other MDC fields
  if [mdc] {
    if [mdc][correlationId] {
      mutate {
        add_field => { "correlation_id" => "%{[mdc][correlationId]}" }
      }
    }
    
    if [mdc][tenantId] {
      mutate {
        add_field => { "tenant_id" => "%{[mdc][tenantId]}" }
      }
    }
    
    if [mdc][userId] {
      mutate {
        add_field => { "user_id" => "%{[mdc][userId]}" }
      }
    }
  }
  
  # Parse business operation logs
  if [logger_name] == "BUSINESS_OPERATIONS" {
    mutate {
      add_field => { "log_type" => "business" }
    }
    
    if [mdc][business.operation] {
      mutate {
        add_field => { "business_operation" => "%{[mdc][business.operation]}" }
        add_field => { "business_domain" => "%{[mdc][business.domain]}" }
        add_field => { "business_action" => "%{[mdc][business.action]}" }
      }
    }
  }
  
  # Parse security audit logs
  if [logger_name] == "SECURITY_AUDIT" {
    mutate {
      add_field => { "log_type" => "security" }
    }
    
    if [mdc][security.operation] {
      mutate {
        add_field => { "security_operation" => "%{[mdc][security.operation]}" }
        add_field => { "security_type" => "%{[mdc][security.type]}" }
        add_field => { "security_risk" => "%{[mdc][security.risk]}" }
      }
    }
  }
  
  # Parse performance logs
  if [logger_name] == "PERFORMANCE" {
    mutate {
      add_field => { "log_type" => "performance" }
    }
    
    if [mdc][performance.duration] {
      mutate {
        convert => { "[mdc][performance.duration]" => "integer" }
        add_field => { "performance_duration_ms" => "%{[mdc][performance.duration]}" }
      }
    }
  }
  
  # Parse HTTP access logs
  if [message] =~ /HTTP/ {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    
    mutate {
      add_field => { "log_type" => "access" }
    }
  }
  
  # Add timestamp parsing
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "host", "agent", "ecs", "input" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "crm-logs-%{+YYYY.MM.dd}"
    template_name => "crm-logs"
    template => "/usr/share/logstash/templates/crm-logs-template.json"
    template_overwrite => true
  }
  
  # Output to stdout for debugging
  stdout {
    codec => rubydebug
  }
}