openapi: 3.0.3
info:
  title: CRM Platform API
  description: |
    Comprehensive API documentation for the CRM Platform microservices including
    authentication, user management, and security features.
    
    ## Authentication
    
    All protected endpoints require a valid JWT token in the Authorization header:
    ```
    Authorization: Bearer <access_token>
    ```
    
    ## Multi-Tenancy
    
    Most endpoints require a tenant context header:
    ```
    X-Tenant-ID: <tenant_uuid>
    ```
    
    ## Rate Limiting
    
    API endpoints are rate limited. Check response headers for current limits:
    - `X-RateLimit-Limit`: Request limit per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Window reset time (Unix timestamp)
    
  version: 1.0.0
  contact:
    name: CRM Platform API Support
    email: api-support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081/api/v1
    description: Authentication Service (Development)
  - url: http://localhost:8082/api/v1
    description: User Management Service (Development)
  - url: http://localhost:8083/api/v1
    description: Tenant Service (Development)
  - url: https://api.crm-platform.com/v1
    description: Production Environment

security:
  - BearerAuth: []
  - TenantContext: []

paths:
  # Authentication Service Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user and receive access tokens
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              basic_login:
                summary: Basic login
                value:
                  usernameOrEmail: "user@example.com"
                  password: "password123"
              mfa_login:
                summary: Login with MFA
                value:
                  usernameOrEmail: "user@example.com"
                  password: "password123"
                  mfaCode: "123456"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '423':
          $ref: '#/components/responses/AccountLocked'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate user session and tokens
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                all_sessions:
                  type: boolean
                  default: false
                  description: Logout from all sessions
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Access Token
      description: Obtain new access token using refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User Registration
      description: Register a new user account
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/mfa/setup:
    post:
      tags:
        - Multi-Factor Authentication
      summary: Setup MFA
      description: Initialize MFA setup for user
      operationId: setupMFA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MFASetupRequest'
      responses:
        '200':
          description: MFA setup initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFASetupResponse'

  /auth/sessions:
    get:
      tags:
        - Session Management
      summary: List User Sessions
      description: Get all active sessions for the current user
      operationId: listSessions
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSession'

  /auth/sessions/{sessionId}:
    delete:
      tags:
        - Session Management
      summary: Terminate Session
      description: Terminate a specific user session
      operationId: terminateSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Session terminated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # User Management Service Endpoints
  /users:
    get:
      tags:
        - User Management
      summary: List Users
      description: Retrieve a paginated list of users
      operationId: listUsers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/UserStatus'
        - name: role
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

    post:
      tags:
        - User Management
      summary: Create User
      description: Create a new user account
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /users/{userId}:
    get:
      tags:
        - User Management
      summary: Get User by ID
      description: Retrieve detailed information about a specific user
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - User Management
      summary: Update User
      description: Update user information
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - User Management
      summary: Delete User
      description: Delete a user account (soft delete by default)
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - name: hard_delete
          in: query
          schema:
            type: boolean
            default: false
        - name: transfer_data_to
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /users/me:
    get:
      tags:
        - Profile Management
      summary: Get Current User Profile
      description: Get the profile of the currently authenticated user
      operationId: getCurrentUserProfile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

    put:
      tags:
        - Profile Management
      summary: Update Profile
      description: Update the current user's profile
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /roles:
    get:
      tags:
        - Role Management
      summary: List Roles
      description: Retrieve all available roles
      operationId: listRoles
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleListResponse'

    post:
      tags:
        - Role Management
      summary: Create Role
      description: Create a new role
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleResponse'

  /teams:
    get:
      tags:
        - Team Management
      summary: List Teams
      description: Retrieve all teams
      operationId: listTeams
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: search
          in: query
          schema:
            type: string
        - name: department
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Teams retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamListResponse'

    post:
      tags:
        - Team Management
      summary: Create Team
      description: Create a new team
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token for authentication
    TenantContext:
      type: apiKey
      in: header
      name: X-Tenant-ID
      description: Tenant context identifier

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        minimum: 0
        default: 0
    SizeParam:
      name: size
      in: query
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SortParam:
      name: sort
      in: query
      description: Sort criteria (field,direction)
      schema:
        type: string
        default: "createdAt,desc"
    UserIdParam:
      name: userId
      in: path
      required: true
      description: User identifier
      schema:
        type: string
        format: uuid

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
          description: Username or email address
          example: "user@example.com"
        password:
          type: string
          format: password
          description: User password
          example: "password123"
        mfaCode:
          type: string
          description: MFA verification code
          example: "123456"
        rememberMe:
          type: boolean
          default: false
          description: Remember login session
        captchaResponse:
          type: string
          description: CAPTCHA response if required

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            access_token:
              type: string
              description: JWT access token
            refresh_token:
              type: string
              description: JWT refresh token
            expires_in:
              type: integer
              description: Token expiration time in seconds
            token_type:
              type: string
              enum: [Bearer]
            mfa_required:
              type: boolean
              description: Whether MFA verification is required
            mfa_token:
              type: string
              description: MFA challenge token
            user:
              $ref: '#/components/schemas/UserInfo'

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Valid refresh token

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            access_token:
              type: string
            refresh_token:
              type: string
            expires_in:
              type: integer
            token_type:
              type: string
              enum: [Bearer]

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          format: password
          minLength: 8
          example: "securePassword123!"
        first_name:
          type: string
          example: "Jane"
        last_name:
          type: string
          example: "Smith"
        phone_number:
          type: string
          example: "+1234567890"
        tenant_id:
          type: string
          format: uuid

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            user_id:
              type: string
              format: uuid
            email:
              type: string
              format: email
            verification_required:
              type: boolean
            message:
              type: string

    MFASetupRequest:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          enum: [TOTP, SMS, EMAIL]
          example: "TOTP"

    MFASetupResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            secret:
              type: string
              description: TOTP secret key
            qr_code:
              type: string
              description: Base64 encoded QR code image
            backup_codes:
              type: array
              items:
                type: string
              description: Backup recovery codes
            setup_token:
              type: string
              description: Setup verification token

    # User Management Schemas
    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        status:
          $ref: '#/components/schemas/UserStatus'
        roles:
          type: array
          items:
            type: string
        tenant_id:
          type: string
          format: uuid

    UserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - SUSPENDED
        - PENDING_VERIFICATION

    CreateUserRequest:
      type: object
      required:
        - username
        - email
        - first_name
        - last_name
      properties:
        username:
          type: string
          example: "jane.smith"
        email:
          type: string
          format: email
          example: "jane.smith@example.com"
        first_name:
          type: string
          example: "Jane"
        last_name:
          type: string
          example: "Smith"
        phone_number:
          type: string
          example: "+1234567891"
        job_title:
          type: string
          example: "Product Manager"
        department:
          type: string
          example: "Product"
        manager_id:
          type: string
          format: uuid
        timezone:
          type: string
          example: "America/Los_Angeles"
        language:
          type: string
          example: "en"
        roles:
          type: array
          items:
            type: string
        teams:
          type: array
          items:
            type: string
            format: uuid
        custom_fields:
          type: object
          additionalProperties: true
        send_welcome_email:
          type: boolean
          default: true

    CreateUserResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            username:
              type: string
            email:
              type: string
              format: email
            status:
              $ref: '#/components/schemas/UserStatus'
            created_at:
              type: string
              format: date-time
            temporary_password:
              type: string
              description: Temporary password for first login
            password_reset_required:
              type: boolean

    UpdateUserRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        job_title:
          type: string
        department:
          type: string
        timezone:
          type: string
        custom_fields:
          type: object
          additionalProperties: true

    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/PagedResponse'

    UserDetailResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/UserDetail'

    UserDetail:
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            job_title:
              type: string
            department:
              type: string
            manager_id:
              type: string
              format: uuid
            email_verified:
              type: boolean
            phone_verified:
              type: boolean
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            last_login_at:
              type: string
              format: date-time
            timezone:
              type: string
            language:
              type: string
            profile_image_url:
              type: string
              format: uri
            roles:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
            teams:
              type: array
              items:
                $ref: '#/components/schemas/UserTeam'
            permissions:
              type: array
              items:
                type: string
            custom_fields:
              type: object
              additionalProperties: true

    UserRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        assigned_at:
          type: string
          format: date-time

    UserTeam:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        role:
          type: string
          enum: [MEMBER, LEAD, MANAGER]
        joined_at:
          type: string
          format: date-time

    UserProfileResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            username:
              type: string
            email:
              type: string
              format: email
            first_name:
              type: string
            last_name:
              type: string
            profile_image_url:
              type: string
              format: uri
            preferences:
              $ref: '#/components/schemas/UserPreferences'

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark]
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean
            sms:
              type: boolean
        language:
          type: string
        timezone:
          type: string

    UpdateProfileRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        timezone:
          type: string
        language:
          type: string
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    # Role Management Schemas
    CreateRoleRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          example: "SALES_MANAGER"
        description:
          type: string
          example: "Sales team manager with CRM access"
        permissions:
          type: array
          items:
            type: string

    RoleResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Role'

    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
        user_count:
          type: integer
        created_at:
          type: string
          format: date-time
        is_system_role:
          type: boolean

    RoleListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/PagedResponse'

    # Team Management Schemas
    CreateTeamRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Marketing Team"
        description:
          type: string
          example: "Digital marketing and campaigns"
        department:
          type: string
          example: "Marketing"
        manager_id:
          type: string
          format: uuid

    TeamResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Team'

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        department:
          type: string
        manager_id:
          type: string
          format: uuid
        member_count:
          type: integer
        created_at:
          type: string
          format: date-time
        members:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'

    TeamMember:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        role:
          type: string
          enum: [MEMBER, LEAD, MANAGER]
        joined_at:
          type: string
          format: date-time

    TeamListResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/PagedResponse'

    # Session Management Schemas
    UserSession:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
        device_type:
          type: string
          example: "Desktop"
        browser:
          type: string
          example: "Chrome 96.0"
        operating_system:
          type: string
          example: "Windows 10"
        ip_address:
          type: string
          example: "192.168.1.100"
        location:
          type: string
          example: "New York, US"
        created_at:
          type: string
          format: date-time
        last_accessed_at:
          type: string
          format: date-time
        is_current:
          type: boolean

    # Common Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            message:
              type: string
              example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              example: "Invalid username or password"
            details:
              type: string
              example: "Additional error details"
        meta:
          $ref: '#/components/schemas/ResponseMeta'

    PagedResponse:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        total_elements:
          type: integer
          example: 150
        total_pages:
          type: integer
          example: 8

    ResponseMeta:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          format: uuid
        pagination:
          type: object
          properties:
            page:
              type: integer
            size:
              type: integer
            total:
              type: integer

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INVALID_REQUEST"
              message: "Invalid request format"
              details: "Required field 'email' is missing"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INVALID_CREDENTIALS"
              message: "Invalid username or password"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "INSUFFICIENT_PERMISSIONS"
              message: "Access denied"

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RESOURCE_NOT_FOUND"
              message: "Requested resource not found"

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RESOURCE_CONFLICT"
              message: "Resource already exists"

    AccountLocked:
      description: Account Locked
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "ACCOUNT_LOCKED"
              message: "Account temporarily locked due to multiple failed attempts"

    TooManyRequests:
      description: Too Many Requests
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Window reset time (Unix timestamp)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Too many requests"

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Multi-Factor Authentication
    description: MFA setup and verification
  - name: Session Management
    description: User session management
  - name: User Management
    description: User account management
  - name: Profile Management
    description: User profile management
  - name: Role Management
    description: Role and permission management
  - name: Team Management
    description: Team and organizational management